[
  {
    "Id": "464153",
    "ThreadId": "218572",
    "Html": "<p>First a comment on the configuration section designer: great work! This simplified creating config sections a whole lot. The work I did in an entire day (mainly debugging) could now be done in a matter of one or two hours!</p>\r\n<p>Unfortunately I've run into an issue that seems to be more a framework issue than a CSD issue:</p>\r\n<p>When I configure an attribute to be a required string, with additional validation, a value is passed twice to my validator.</p>\r\n<p>The first time it is the default value (which I explicitly did not enter on purpose), which is an empty string (not a null reference). Now my validator is an email address validator so this should return an exception, as an empty string is not a valid email address. The second time the actual configured value is passed to the validator, and this is valid (dependent on what I entered in the config file of course).</p>\r\n<p>I see the generated code by CSD is correct by not specifying a default value to the&nbsp;<span style=\"font-family:Consolas, 'Courier New', Courier, monospace;white-space:pre\">ConfigurationPropertyAttribute</span></p>\r\n<p>Also the the callbackvalidator seems to be properly bound:&nbsp;\r\n<div style=\"color:black;background-color:white\">\r\n<pre>CallbackValidatorAttribute(Type:=<span style=\"color:blue\">GetType</span>(EmailCallbackValidatorClass), CallbackMethodName:=<span style=\"color:#a31515\">&quot;ValidateCallback&quot;</span>)\r\n</pre>\r\n</div>\r\n</p>\r\n<p>This class is partially generated by CSD, and passes the object to be validated to my custom method (without casting or converting the value).</p>\r\n<p>So it seems all is properly done by CSD, and that the framework is a bit quirky.</p>\r\n<p>I tried to do the following workaround:</p>\r\n<p>I configured the default value to be a null-reference (nothing) (in CSD), and whenever a null-reference were to be passed to my validator, I'd accept it, as any entered value in the config file is bound to be at least an empty string. When the attribute would be omitted totally, the framework would detect the missing required attribute (I hoped). Unfortunately the default value was not passed as a null-reference but still as an empty string so the story ends.</p>\r\n<p>I configured the default value as following:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>ConfigurationPropertyAttribute(FromEmailPropertyName, IsRequired:=<span style=\"color:blue\">true</span>, IsKey:=<span style=\"color:blue\">false</span>, IsDefaultCollection:=<span style=\"color:blue\">false</span>, DefaultValue:=<span style=\"color:blue\">Nothing</span>)\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Any ideas on how to validate a required string?</p>",
    "PostedDate": "2010-07-07T02:55:23.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]